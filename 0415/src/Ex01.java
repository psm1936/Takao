
public class Ex01 {

	public static void main(String[] args) {
		
		// 상속  
		// 이어받다. 물려받다.
		// 기존 클래스의 변수와 메소드를 물려받아 새로운 클래스를 구성
		
		// 부모 클래스  : 자식은 여러개 받을수있음.
		//, 자식 클래스  : 부모는 하나!
		
		//상속 예제
		
		// 부모도 부모가 있을 수 있다.
		
		// 오버 라이딩 조건		
		// 이름, 변수 개수 ,타입등 같아야한다.
		
		// 접근 제한자 (지정자)
		// private : 외부 객체 접근 불가
		// default : 같은 패키지에 있는 클래스만 접근 가능
		// protected :
		// public :공용
		
		//final : 변수를final 키워드로 선언한경우 반드시 초기화
		
		//Casting (캐스팅)
		//기존 데이터 타입을 다른 데이터 타입으로 변환하는것.
		
		//Upcasting(업캐스팅)
		// 하위 클래스가 상위 클래스 타입으로 자동 타입 변환 하는것
		
		//downcasting(다운캐스팅)
		// 업 캐스팅된것을 강제 타입 변환 으로 다시 되돌림.
		
//		Java의 상속 : 기존클래스의 변수(데이터)와 메소드(로직,코드)를 물려받아 새로운 클래스를 구성하는 것
//	       * 
//	       * 상속의 장점 : 기존클래스 변수와 코드재사용
//	       *             먼저작성된 검증된 프로그램을 재사용
//	       *             클래스간 계층적 분류 및 관리
//	       * 
//	       * 오버라이딩의 조건 : 메소드 이름이같아야함
//	       *                   메소드 매개변수의 개수와 데이터 타입이 같아야한다.
//	       *                   메소드의 리턴 타입이 같아야 한다.
//	       * 
//	       * 
//	       * 오버로딩(올라탄다) : 부모클래스의 메소드의 동작방법을 변경
//	       * 오버라이딩 : 같은 이름, 다른 매개변수의 메소드들들을 여러 개 만들 수있따.
//	       * 
//	       * 
//	       * 오버로딩 > 중복정의
//	       * 오버라이딩 > 재정의
//	       * 
//	       * 접근제한자
//	       * private : 외부객체 접근 불가
//	       * default : 같은 패키지안에 클래스만접근가능
//	       * protected : 상속관계에 있거나 같은패키지에 있는 클래스만 접근가능
//	       * public :  모든 객체에서 접근가능
//	       * 
//	       * final 키워드: 상수를 표현하기 위한 키워드
//	       *             클래스 이름앞에 사용할 경우 상속을 받을수없다.
//	       *             메소드 앞에 붙인경우 오버라이딩을 할수 없다.
//	       * 
//	       * 
//	       *  중요 Casting (캐스팅) : 기존데이터 타입을 다른 데이터타입으로 변환하는 것
//	       *                    
//	       *  Upcasting(업캐스팅) : 하위클래스가 상위클래스 타입으로 자동 타입 변환하는것(다형성)    = 자동형변환
//	       *                    예) 배열[]을 생성햇다면 같은배열에 다른 타입을 넣을수없다.
//	       *                       하지만 이떄 업캐스팅을해서 같은타입으로 형변환시켜주면 한 배열에 넣을수있다.
//	       *                       꺼내와서는 다시 그 타입으로 쓰기위해서 변형해줘야한다.
//	       *                       그때 쓰는게 다운캐스팅이다.
//	       *  
//	       *  Downcasting(다운캐스팅) :  업캐스팅된것을 강제(명시적) 타입 변환으로 다시 되돌리는것   = 강제형변환

		}

}
